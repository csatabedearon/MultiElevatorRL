Metadata-Version: 2.4
Name: multi_elevator
Version: 1.0.0
Summary: A multi-elevator system with reinforcement learning
Home-page: https://github.com/csatabedearon/multi_elevator
Author: Csata Bede Aron
Author-email: csatabedearonka@gmail.com
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: gymnasium
Requires-Dist: numpy
Requires-Dist: torch
Requires-Dist: stable-baselines3
Requires-Dist: flask
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Multi-Elevator System with Reinforcement Learning

A sophisticated multi-elevator system that uses reinforcement learning to optimize elevator scheduling and passenger transportation.

## Project Structure

```
multi_elevator/
â”œâ”€â”€ src/
â”‚   â””â”€â”€ multi_elevator/
â”‚       â”œâ”€â”€ environment/     # Environment implementation
â”‚       â”œâ”€â”€ models/         # Model definitions and architectures
â”‚       â”œâ”€â”€ training/       # Training scripts and utilities
â”‚       â””â”€â”€ utils/          # Utility functions and web interface
â”œâ”€â”€ tests/                 # Test files
â”œâ”€â”€ configs/              # Configuration files
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ best_models/      # Best performing model checkpoints
â”‚   â””â”€â”€ checkpoints/      # Training checkpoints
â”œâ”€â”€ docs/                 # Documentation
â”œâ”€â”€ logs/                 # Training logs and tensorboard data
â”œâ”€â”€ requirements.txt      # Project dependencies
â””â”€â”€ setup.py             # Package installation configuration
```

## Installation

1. Clone the repository:
```bash
git clone https://github.com/csatabedearon/MultiElevatorRL.git
cd MultiElevatorRL
```

2. Create a virtual environment (recommended):
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install the package:
```bash
pip install -e .
```

## Environment Setup

### System Requirements
- Python 3.8 or higher
- CUDA-capable GPU (recommended for training)
- At least 8GB RAM
- 20GB free disk space

### Dependencies
The project uses several key libraries:
- PyTorch for deep learning
- Gymnasium for RL environment
- Stable-Baselines3 for RL algorithms
- Flask for web interface
- NumPy and Pandas for data handling
- Matplotlib for visualization

All dependencies are listed in `requirements.txt` and will be installed automatically during setup.

### Configuration
The project uses configuration files in the `configs/` directory:
- `env_config.yaml`: Environment parameters (number of elevators, floors, etc.)
- `model_config.yaml`: Model architecture and hyperparameters
- `training_config.yaml`: Training settings and optimization parameters

You can modify these files to customize the system behavior.

## Usage

### Training

To train a new model:
```bash
python -m multi_elevator.training.train
```

Training progress can be monitored using TensorBoard:
```bash
tensorboard --logdir logs/
```

### Testing

To test a trained model:
```bash
python -m multi_elevator.training.test
```

### Web Interface

To run the web interface:
```bash
python -m multi_elevator.utils.web_app
```

The web interface will be available at `http://localhost:5000`

## Development

- The project uses Python 3.8 or higher
- Dependencies are managed through `requirements.txt`
- Code follows PEP 8 style guidelines
- Tests should be written for new features
- Use `pytest` to run the test suite

## License

This project is licensed under the MIT License - see the LICENSE file for details.
